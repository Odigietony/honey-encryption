@model AuthenticationProject.Models.User

@{
    Layout = "~/Views/Shared/_CustomLayout.cshtml";
    ViewBag.Title = "TempUnavailable";
}



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()


    <form class="register-form">
        <h4 class="title">Confirm details</h4>
        <hr />

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })


        @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-5" })

        @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })

        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })

        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })


        @Html.LabelFor(model => model.Bvn, htmlAttributes: new { @class = "control-label col-md-2" })

        @Html.EditorFor(model => model.Bvn, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Bvn, "", new { @class = "text-danger" })
        <input id="myText" type="submit" value="Login" class="btn btn-danger btn-block" />

    </form>
}
@if (ViewData["Catch"] != null)
{
    <script>
        function myFunction() {
            document.getElementById("myText").disabled = true;
        }
        myFunction();
    </script>
    <h2 class="text-capitalize text-danger animated bounceInDown">@ViewData["Catch"]</h2>
}


